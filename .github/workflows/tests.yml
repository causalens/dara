name: TESTS

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  lint-and-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup git config
        run: |
          git config --global --add safe.directory /__w/dara/dara
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - uses: snok/install-poetry@v1
        with:
          version: 1.8.3
      - name: Install Anthology
        run: poetry self add anthology
      - name: Setup cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python venv if cache was not found
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry anthology install
        env:
            POETRY_HTTP_BASIC_CAUSALENS_USERNAME: '${{ secrets.GAR_USERNAME }}'
            POETRY_HTTP_BASIC_CAUSALENS_PASSWORD: '${{ secrets.GAR_KEY }}'
      - name: Link venvs if cache was hit
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        run: make link
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
            version: 6
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Detect Cypress version used
        id: set-cypress
        run: echo "::set-output name=cypress::$(tooling/get-cypress-version/main.js)"
      - name: Cache Cypress binary
        uses: actions/cache@v2
        # This attempts to restore cached Cypress; if not found and job is successful, creates new cache
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ steps.set-cypress.outputs.cypress }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-
      - name: Install system deps
        run: sudo apt update && sudo apt install wget -y
      - name: Install and cache APT Cypress deps
        uses: awalsh128/cache-apt-pkgs-action@v1.4.1
        with:
          packages: libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
          version: cypress-${{ runner.os }}-${{ steps.set-cypress.outputs.cypress }}
      - name: Install JS project dependencies
        run: make deps-project
        env:
          PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
      - name: Prepare resources required for testing
        run: make prepare
      - name: Run linting
        run: make lint
      - name: Run format check
        run: make format-check
      - name: Run Python security - Bandit
        run: make security-scan
      - name: Run JS security - Bearer
        run: make bearer
      - name: Run tests
        run: make test
      - name: Run Cypress E2E tests
        run: |
          cd packages/dara-core
          pnpm run test:e2e
        env:
          # Override default setting to save screenshots in CI
          CYPRESS_SCREENSHOT_ON_RUN_FAILURE: true
      - name: Upload Cypress screenshots
        # Uploads screenshots if Cypress tests failed
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: packages/dara-core/cypress/screenshots
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              username: 'action-slack',
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: "${{ secrets.SLACK_BUILD_CHANNEL_WEBHOOK }}"
        if: ${{ github.actor != 'dependabot[bot]' }}
