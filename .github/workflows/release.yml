name: package and publish

on:
  push:
    tags:
      - v*

jobs:
  package-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          # Use a PAT with admin privileges, so we can push to main the changes to changelog, lock and toml.
          # https://github.community/t/how-to-push-to-protected-branches-in-a-github-action/16101/34
          token: ${{ secrets.GH_ACTIONS_KEY }}
          fetch-depth: 0  # 0 fetches all history, apparently needed for push:
      - name: Extract branch name
        # This is required for pushing the changes to version, lock and changelog to the correct branch.
        id: extract_branch
        shell: bash
        run: |
          echo "ref" $REF
          raw=$(git branch -r --contains $REF | grep -v '\->')
          echo "raw" $raw
          processed=$(echo $raw | awk '{print $1;}')
          echo "processed" $processed
          branch=${processed/origin\/}
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "HEAD:$branch" | tr -d '[:space:]'
      - name: Setup git config
        run: |
          git config --global --add safe.directory /__w/dara/dara
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - uses: snok/install-poetry@v1
        with:
          version: 1.8.3
      - name: Install Anthology
        run: poetry self add anthology
      - name: Setup cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python venv if cache was not found
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
            poetry anthology install
        env:
            POETRY_HTTP_BASIC_CAUSALENS_USERNAME: '${{ secrets.GAR_USERNAME }}'
            POETRY_HTTP_BASIC_CAUSALENS_PASSWORD: '${{ secrets.GAR_KEY }}'
      - name: Link venvs if cache was hit
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        run: make link
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
            version: 6
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install project dependencies
        run: make deps-project
      # Extract current and tag versions so that we can do version bump in the right places.
      - name: Extract tags (versions)
        id: extract_tag
        shell: bash
        run: |
            # Extract previous (current) tag from the lerna.json file
            previous_tag=v$(sed -n 's/.*"version": "\(.*\)".*/\1/p' lerna.json)
            echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT
            tag=$(git describe --tags --exact-match $GITHUB_SHA)
            # Remove the v prefix
            version=${tag#v}
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
      - name: Set versions for JS and Python packages
        shell: bash
        run: |
          poetry anthology version ${{ steps.extract_tag.outputs.version }}
          poetry anthology install
          pnpm lerna version ${{ steps.extract_tag.outputs.version }} --no-private --no-git-tag-version --force-publish --exact --yes
          pnpm i --lockfile-only
      - name: Parse and resolve changelog
        id: set-changelog
        run: |
          changelog=$(tooling/changelog-parser/main.js ${{ steps.extract_tag.outputs.version }})
          echo "changelog=$changelog" >> $GITHUB_OUTPUT
      - name: Update READMEs to work on PyPi before publishing
        run: |
          poetry run python ./tooling/scripts/update-readmes.py ${{ github.ref_name }}
      - name: Prepare resources required for packaging
        run: make prepare
      - name: Make packages
        run: poetry anthology run package
      - name: Publish packages
        run: make publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      - name: Package and Publish Docs
        run: make publish-docs
        env:
          PACKAGE: dara
          VERSION: ${{ steps.extract_tag.outputs.version }}
          PACKAGE_PATHS: |
            packages/create-dara-app/create_dara_app
            packages/dara-components/dara.components
            packages/dara-core/dara.core
          BUILD_REFERENCE: true
          ARTIFACTORY_URL: https://causalens.jfrog.io/artifactory
          ARTIFACTORY_USERNAME: ${{ secrets.JF_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.JF_PASSWORD }}
          ARTIFACTORY_REPOSITORY: documentation
      - name: Commit version bump
        run: |
              # Revert changes to readmes they are only for PyPi
              git checkout -- **/README.md
              git checkout -- .npmrc
              git add .
              git commit -m "Version bump to ${{ steps.extract_tag.outputs.tag}} [skip ci]"
              git push origin $(echo "HEAD:$BRANCH" | tr -d '[:space:]')
              # Move the tag to the new commit
              git push --delete origin ${{ steps.extract_tag.outputs.tag }}
              git tag -fa ${{ steps.extract_tag.outputs.tag }} -m "Update tag"
              git push origin ${{ steps.extract_tag.outputs.tag }}
        env:
          GH_PAT: '${{ secrets.GH_ACTIONS_KEY }}'
          GH_USERNAME: 'sam-causalens'
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            fromTag: ${{ steps.extract_tag.outputs.previous_tag }}
            configurationJson: |
                {
                  "categories": [
                      {
                        "title": "## 🚀 Features",
                        "labels": ["Feat", "Feature"]
                      },
                      {
                        "title": "## 📈 Improvements",
                        "labels": ["Improvement"]
                      },
                      {
                        "title": "## 🐛 Fixes",
                        "labels": ["Fix", "Bugfix"]
                      },
                      {
                        "title": "## 📦 Other",
                        "labels": []
                      }
                  ],
                  "label_extractor": [
                      {
                          "on_property": "title",
                          "pattern": "^([^:]*):.*$",
                          "target": "$1"
                      }
                  ]
                }
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{steps.build_changelog.outputs.changelog}}

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              username: 'action-slack',
              blocks: [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Dara changelog for tag ${{ steps.extract_tag.outputs.version }}"
                  }
                },
                ...(${{ steps.set-changelog.outputs.changelog }}.map(section => ({
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": section
                  }
                })))
              ]
            }
        env:
          SLACK_WEBHOOK_URL: "${{ secrets.SLACK_TECH_TEAM_CHANNEL_WEBHOOK }}"
